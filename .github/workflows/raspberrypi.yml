name: Deploy to Raspberry Pi

on:
    push:
        branches: ["main"]

jobs:
    build-client:
        runs-on: ubuntu-latest
        environment: raspberrypi
        env:
            REACT_APP_API_URL: ${{ vars.REACT_APP_API_URL }}
            REACT_APP_BASE_URL: ${{ vars.REACT_APP_BASE_URL }}
            REACT_APP_GTM_ID: ${{ vars.REACT_APP_GTM_ID }}
        outputs:
            version: ${{ steps.build-client.outputs.version }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Build client
              working-directory: client
              id: build-client
              run: |
                  TAG="$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")"
                  COMMIT_SHA="$(git rev-parse --short HEAD)"
                  export REACT_APP_VERSION="${TAG#v}-raspberrypi+${COMMIT_SHA}"
                  echo "version=$REACT_APP_VERSION" >> $GITHUB_OUTPUT

                  npm install -g pnpm
                  pnpm install --frozen-lockfile
                  pnpm build

            - name: Create 404.html from index.html
              working-directory: client/build
              run: cp index.html 404.html

            - name: Upload client build
              uses: actions/upload-artifact@v4
              with:
                  name: client-build
                  path: client/build

    build-server:
        runs-on: ubuntu-latest
        environment: raspberrypi
        outputs:
            image: ${{ steps.set-image.outputs.image }}
            repo: ${{ steps.set-image.outputs.repo }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build server and save Docker image
              working-directory: server
              id: set-image
              run: |
                  IMAGE_BASE="ghcr.io/${{ github.repository }}"
                  COMMIT_SHA="$(git rev-parse --short HEAD)"
                  IMAGE_SHA="$IMAGE_BASE:$COMMIT_SHA"
                  IMAGE_LATEST="$IMAGE_BASE:latest"

                  docker buildx build \
                    --platform linux/arm64 \
                    -t "$IMAGE_SHA" \
                    -t "$IMAGE_LATEST" \
                    --push .

                  echo "image=$IMAGE_SHA" >> $GITHUB_OUTPUT
                  echo "repo=$IMAGE_BASE" >> $GITHUB_OUTPUT

    deploy:
        runs-on: [self-hosted, Linux, ARM64]
        environment: raspberrypi
        env:
            REACT_APP_API_URL: ${{ vars.REACT_APP_API_URL }}
            REACT_APP_GTM_ID: ${{ vars.REACT_APP_GTM_ID }}
            REACT_APP_VERSION: ${{ needs.build-client.outputs.version }}
        needs: [build-client, build-server]
        steps:
            - name: Download client build
              uses: actions/download-artifact@v4
              with:
                  name: client-build
                  path: client/build

            - name: Log in to GitHub Container Registry
              run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            - name: Deploy to Raspberry Pi
              run: |
                  IMAGE_SHA="${{ needs.build-server.outputs.image }}"
                  IMAGE_REPO="${{ needs.build-server.outputs.repo }}"

                  rm -rf ${{ vars.DEPLOY_TARGET }}/*
                  cp -r client/build/* ${{ vars.DEPLOY_TARGET }}/

                  docker pull $IMAGE_SHA
                  docker stop swengineer || true
                  docker rm swengineer || true
                  docker run -d --name swengineer \
                    --restart unless-stopped \
                    -p ${{ vars.PORT }}:${{ vars.PORT }} \
                    -e GOOGLE_CLIENT_ID="${{ vars.GOOGLE_CLIENT_ID }}" \
                    -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
                    -e HOSTNAME="${{ vars.HOSTNAME }}" \
                    -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                    -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
                    -e NODE_ENV="${{ vars.NODE_ENV }}" \
                    -e PORT=${{ vars.PORT }} \
                    -e REACT_APP_API_URL="${{ vars.REACT_APP_API_URL }}" \
                    -e REACT_APP_GTM_ID="${{ vars.REACT_APP_GTM_ID }}" \
                    -e REACT_APP_VERSION="${{ needs.build-client.outputs.version }}" \
                    -e SALT_ROUNDS=${{ vars.SALT_ROUNDS }} \
                    -e SESSION_COOKIE_DOMAIN="${{ vars.SESSION_COOKIE_DOMAIN }}" \
                    -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
                    -e SMTP_HOST="${{ vars.SMTP_HOST }}" \
                    -e SMTP_PASSWORD="${{ secrets.SMTP_PASSWORD }}" \
                    -e SMTP_PORT="${{ vars.SMTP_PORT }}" \
                    -e SMTP_SENDER='${{ vars.SMTP_SENDER }}' \
                    -e SMTP_USERNAME="${{ vars.SMTP_USERNAME }}" \
                    -e TOKEN_SIZE=${{ vars.TOKEN_SIZE }} \
                    $IMAGE_SHA
                  docker container prune -f
                  docker images "$IMAGE_REPO" --format "{{.Repository}}:{{.Tag}}" |
                    grep -v "$IMAGE_SHA" | \
                    xargs -r docker rmi -f

            - name: Cleanup GitHub Actions workspace
              if: always()
              run: rm -rf $GITHUB_WORKSPACE/*
